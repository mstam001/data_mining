---
title: "Homework #7: SVM and Calibration" 
author: "Mark Stammler"
format: sys6018hw-html
---


```{r, message=FALSE}
library(ranger)
library(tidyverse)
library(readr)
library(dplyr)


train_data = read_csv('~/School/Data Mining/Data/train.csv')
test_data = read_csv('~/School/Data Mining/Data/test.csv')

```

```{r, message=FALSE}
#cleaning
library(mice)

# TRAIN
# Perform multiple imputation
imputed_data <- mice(train_data)  # m = number of imputations

# Complete the imputed data
completed_data <- complete(imputed_data)

# Convert to dataframe
train_complete <- as.data.frame(completed_data)


train_complete[is.na(train_complete)] = FALSE


# TEST 

imputed_data2 <- mice(test_data)  # m = number of imputations

# Complete the imputed data
completed_data2 <- complete(imputed_data2)

# Convert to dataframe
test_complete <- as.data.frame(completed_data2)


test_complete[is.na(test_complete)] = FALSE


test_complete
```

```{r, message=FALSE}
library(MASS)
set.seed(2023)   # set seed to reproducible
K = 10           # number of folds
folds = rep(1:K, length=nrow(train_complete)) %>% sample() # make folds



#-- Run cross-validation
set.seed(192)
SSE = numeric(K)
for(k in 1:K){
  rf = ranger(SalePrice ~ ., data = train_complete)
  yhat = predict(rf, test_complete)$predictions
  SSE[k] = sum( (yhat - train_complete$SalePrice)^2 )
}
MSE = sum(SSE) / nrow(train_complete)
(RMSE = sqrt(MSE) )


```

```{r}
tune_grid = expand_grid(
  mtry = seq(34),
  min.bucket = 1
)
M = 10  # number of repeats

#: Repeated OOB analysis
RMSE = tibble()               # initiate results df
for(m in 1:M) {
  # print(paste("starting m =", m, "of", M))
  for(i in 1:nrow(tune_grid)) {
    mtry = tune_grid$mtry[i]
    min.bucket = tune_grid$min.bucket[i]
    rf = ranger(SalePrice~., data=train_complete, 
                mtry = mtry, min.bucket = min.bucket, 
                num.trees = 5000,
                seed = m)             # ensure same bagging for all mtry
    out = tibble(mtry, min.bucket,
           rmse = sqrt(rf$prediction.error), 
           iter = m)
    RMSE = bind_rows(RMSE, out)
  }
}



```
```{r}
#-- Aggregate Results
RMSE_agg = RMSE %>% 
  group_by(mtry, min.bucket) %>% 
  summarize(n=n(), se = sd(rmse)/sqrt(n), rmse = mean(rmse), .groups="drop")

RMSE_agg %>% slice_min(rmse, n = 6) %>% knitr::kable()

```

```{r}
#-- Plot Results
RMSE_agg %>% 
  mutate(min.bucket = factor(min.bucket)) %>% # make into factor for plotting
  ggplot(aes(mtry, rmse, color=min.bucket)) + 
  geom_point() + geom_line() +
  geom_ribbon(aes(ymin=rmse-2*se, ymax=rmse+2*se, 
                  color=NULL, fill=min.bucket),
              alpha=.1, show.legend = FALSE) 

```


